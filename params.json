{"google":"","tagline":"Lithium is a data centric WebSocket library for both Node.js and the Browser.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Lithium","body":"___WIP Code Coming Soon___\r\n\r\n# Lithium\r\n\r\n__Lithium__ is a data centric WebSocket library for both Node.js and the Browser.\r\n\r\n\r\n## Installation\r\n    \r\n___Client___\r\n\r\n    <script type=\"text/javascript\" src=\"lithium.client.js\"></script>\r\n\r\n___Server___\r\n\r\n    npm install lithium\r\n\r\n\r\n## Usage\r\n\r\nBelow is an example of a simple, JSON based echo server.\r\n\r\n___Client___\r\n\r\n    var client = lithium.Client(function(client) {\r\n\r\n        client.on('message', function(msg) {\r\n            ...\r\n        });\r\n\r\n        client.send({\r\n            msg: 'Hello World'\r\n        });\r\n\r\n    }, JSON.stringify, JSON.parse);\r\n\r\n\r\n___Server___\r\n\r\n    var lithium = require('lithium');\r\n\r\n    var server = new lithium.Server(function(remote) {\r\n\r\n        remote.accept();\r\n        remote.on('message', function(msg) {\r\n            remote.send(msg);\r\n        });\r\n\r\n    }, JSON.stringify, JSON.parse);\r\n    \r\n    server.listen(8000);\r\n\r\n\r\n## Features\r\n\r\n- WebSocket Protocols (v75, v76, hixie and hyby)\r\n- Binary Message Support\r\n- Consistent API on both Server and Client\r\n- No dependencies\r\n\r\n\r\n## API\r\n\r\n### Server\r\n\r\nA `http.Server`-like interface for managing web socket connections.\r\n\r\n\r\n___Methods___\r\n\r\n- __lithium.Server([callback] [, encoder, decoder])__ *(Constructor)*\r\n\r\n    Creates a new server instance.\r\n\r\n    The optional `callback` argument is shortcut for the `connection` event.\r\n\r\n    If both the `encoder` and `decoder` arguments are present, messages will be \r\n    passed to these functions when being send / received.\r\n\r\n    For example, in order to process and treat all messages as JSON objects pass\r\n\r\n\r\n- __listen(port [, hostname])__\r\n\r\n    Makes the server listen for incoming web socket requests on `port` and \r\n    - optionally - `hostname`.\r\n\r\n\r\n- __listen(http(s).Server)__\r\n\r\n    Makes the server listen for incoming web socket request on an existing \r\n    instance of `http.Server` or `https.Server`.\r\n\r\n\r\n- __remotes([filter])__\r\n\r\n    Returns a array with all remotes that are currently connected to the server \r\n    (meaning that only accepted remotes will be contained in the array).\r\n\r\n    Filter is an optional function behaving much like `Array.filter` in that it \r\n    filters the remotes before returning them.\r\n\r\n\r\n- __broadcast(message [, filter])__\r\n\r\n    Broadcasts a message to all *accepted* remotes on the server. \r\n\r\n    Filter is an optional function behaving much like `Array.filter` in that it \r\n    filters the remotes before messaging them.\r\n\r\n\r\n- __close([message])__\r\n    \r\n    Closes the server by preventing any furhter connections to be made and \r\n    invokes the `close` method of all the server's remotes.\r\n\r\n    Also sends an optional `message` to all *accepted* remotes before closing \r\n    their connections. \r\n\r\n\r\n___Events___\r\n\r\n- __connection__ => *function(remote)*\r\n\r\n    Emitted when a `remote` connects to the server.\r\n\r\n- __accepted__ => *function(remote)*\r\n\r\n    Emitted when the server accepts a `remote`.\r\n\r\n- __rejected__ => *function(remote)*\r\n\r\n    Emitted when the server rejects a `remote`.\r\n\r\n- __closed__ => *function(remote, closedByRemote)*\r\n\r\n    Emitted when a `remote` disconnects from the server.\r\n\r\n    `closedByRemote` will be `true` in the case that the disconnect was initiated \r\n    by the remote.\r\n\r\n- __close__\r\n\r\n    Emitted when the server stops listening for new connections.\r\n\r\n\r\n\r\n### Remotes\r\n\r\nEach remote encapsulate a single web socket connection to a client.\r\n\r\nA remote is only recognized as being connected after it was accepted.\r\n\r\n\r\n___Methods___\r\n\r\n- __accept()__\r\n\r\n    Accepts a pending remote connection, which adds it to the list of connected \r\n    remotes on the server.\r\n\r\n    Once a remote is accepted messages can be send to it.\r\n    \r\n    Throws an error in case the connection is no longer pending.\r\n\r\n\r\n- __reject([reason])__\r\n\r\n    Rejects a pending remote and sends an optional `reason` as a message before \r\n    closing the connection. \r\n\r\n    Throws an error in case the connection is no longer pending.\r\n    \r\n- __info()__\r\n\r\n    Returns a object containing connection specific information:\r\n\r\n        {\r\n            ip: \"127.0.0.1\"\r\n            port: 35758,\r\n            bytesSend: 123,\r\n            bytesReceived: 456\r\n        }\r\n\r\n    > Note: This object is a reference.\r\n\r\n- __message(message)__\r\n    \r\n    Sends a `message` to the remote.\r\n\r\n    Throws an error in case the connection is not accepted or was rejected.\r\n\r\n\r\n- __close([message])__\r\n\r\n    Closes the connection to the remote, and optional `message` can be send \r\n    right before the connection is being closed.\r\n\r\n    Throws an error in case the connection is already closed.\r\n\r\n\r\n___Events___\r\n\r\n- __message__ => *function(message)*\r\n\r\n    Emitted when a `message` is received from a remote. \r\n    \r\n\r\n- __close__ => *function(closedByRemote)*\r\n\r\n    Emitted when the remote is disconnected from the server.\r\n\r\n    `closedByRemote` will be `true` in the case that the disconnect was initiated \r\n    by the remote.\r\n\r\n\r\n\r\n### Client\r\n\r\nA thin wrapper around the browser side `WebSocket` object, providing a \r\ninterface that is consistent with the lithium server.\r\n\r\n\r\n___Methods___\r\n\r\n- __lithium.Client([callback] [, encoder, decoder])__ *(Constructor)*\r\n\r\n    The optional `callback` argument is shortcut for the `connection` event.\r\n\r\n    If both the `encoder` and `decoder` arguments are present, messages will be \r\n    passed to these functions when being send / received.\r\n\r\n    For example, in order to process and treat all messages as JSON objects pass\r\n\r\n\r\n- __connect(port [, hostname])__\r\n\r\n    Connects to the server at `port` and - optionally - `hostname`.\r\n\r\n    \r\n- __isConnected()__ \r\n\r\n    Returns `true` in case the client is currently connected to the server.\r\n\r\n\r\n- __message(message)__\r\n\r\n    Sends a `message` to the remote.\r\n\r\n    Throws an error in case the connection is not yet open or was closed.\r\n\r\n\r\n- __close([message])__\r\n\r\n    Closes the connection to the server, and optional `message` can be send \r\n    right before the connection is being closed.\r\n\r\n    Throws an error in case the connection is already closed.\r\n\r\n\r\n___Events___\r\n\r\n- __connection__\r\n\r\n    Emitted once the connection to the server is established.\r\n\r\n\r\n- __message__ => *function(message)*\r\n\r\n    Emitted when a `message` is received from the server. \r\n\r\n\r\n- __close__ => *function(closedByServer)*\r\n\r\n    Emitted when the client is disconnected from the server.\r\n\r\n    In the case that the server has initiated the close of the connection, \r\n    the value of `closedByServer` will be `true`.\r\n\r\n\r\n## License\r\n\r\n__Lithium__ is licenses under MIT.\r\n\r\n"}