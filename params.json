{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Lithium","google":"","tagline":"A data centric WebSocket library for both Node.js and the Browser.","body":"# Lithium\r\n\r\n__Lithium__ is a data centric WebSocket library for both Node.js and the Browser.\r\n\r\n\r\n## Installation\r\n    \r\n#### Client\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"lithium.client.js\"></script>\r\n```\r\n\r\n#### Server\r\n\r\n    npm install lithium\r\n\r\n\r\n## Usage\r\n\r\nBelow is an example of a simple, JSON based echo server.\r\n\r\n#### Client\r\n\r\n```javascript\r\nvar client = lithium.Client(function(client) {\r\n\r\n    client.on('message', function(msg) {\r\n        ...\r\n    });\r\n\r\n    client.send({\r\n        msg: 'Hello World'\r\n    });\r\n\r\n}, JSON.stringify, JSON.parse);\r\n```\r\n\r\n#### Server\r\n\r\n```javascript\r\nvar lithium = require('lithium');\r\n\r\nvar server = new lithium.Server(function(remote) {\r\n\r\n    remote.accept();\r\n    remote.on('message', function(msg) {\r\n        remote.send(msg);\r\n    });\r\n\r\n}, JSON.stringify, JSON.parse);\r\n\r\nserver.listen(8000);\r\n```\r\n\r\n## Features\r\n\r\n- WebSocket Protocols (v75, v76, hixie and hyby)\r\n- Binary Message Support\r\n- Consistent API on both Server and Client\r\n- No dependencies\r\n\r\n\r\n## API\r\n\r\n### Server\r\n\r\nA `http.Server`-like interface for managing web socket connections.\r\n\r\n\r\n#### Methods\r\n\r\n- __Constructor - lithium.Server([Function:callback] [, Function:encoder, Function:decoder])__\r\n\r\n    Creates a new server instance.\r\n\r\n    The optional `callback` argument is shortcut for the `connection` event.\r\n\r\n    If both the `encoder` and `decoder` arguments are present, messages will be \r\n    passed to these functions when being send / received.\r\n\r\n    For example, in order to process and treat all messages as JSON objects pass\r\n\r\n\r\n- __listen(Number:port [, String:hostname])__\r\n\r\n    Makes the server listen for incoming web socket requests on `port` and - \r\n    optionally - `hostname`.\r\n\r\n\r\n- __listen(http(s).Server)__\r\n\r\n    Makes the server listen for incoming web socket request on an existing \r\n    instance of `http.Server` or `https.Server`.\r\n\r\n\r\n- __Array[Remote] - remotes([Function:filter])__\r\n\r\n    Returns a array with all remotes that are currently connected to the server \r\n    (meaning that only accepted remotes will be contained in the array).\r\n\r\n    Filter is an optional function behaving much like `Array.filter` in that it \r\n    filters the remotes before returning them.\r\n\r\n\r\n- __Integer - send(Any:message [, Function:filter])__\r\n\r\n    Sends a message to all *accepted* remotes on the server. \r\n\r\n    Filter is an optional function behaving much like `Array.filter` in that it \r\n    filters the remotes before messaging them.\r\n\r\n    Returns the number of remotes the message was sent to.\r\n\r\n\r\n- __Boolean - close([string:reason])__\r\n    \r\n    Closes the server by preventing any furhter connections to be made and \r\n    invokes the `close` method of all the server's remotes.\r\n\r\n    The optional `reason` is only supported in newer versions of the WebSocket \r\n    protocol and will be available as the `reason` property on the WebSocket's \r\n    close event.\r\n\r\n    Returns `false` in case the server is already closed.\r\n\r\n\r\n#### Events\r\n\r\n- __connection(Remote:remote)__\r\n\r\n    Emitted when a `remote` connects to the server.\r\n\r\n\r\n- __accepted(Remote:remote)__\r\n\r\n    Emitted when the server accepts a `remote`.\r\n\r\n\r\n- __rejected(Remote:remote)__\r\n\r\n    Emitted when the server rejects a `remote`.\r\n\r\n\r\n- __closed(Remote:remote, Boolean:closedByRemote)__\r\n\r\n    Emitted when a `remote` disconnects from the server.\r\n\r\n    `closedByRemote` will be `true` in the case that the disconnect was initiated \r\n    by the remote.\r\n\r\n\r\n- __close()__\r\n\r\n    Emitted when the server stops listening for new connections.\r\n\r\n\r\n\r\n### Remotes\r\n\r\nEach remote encapsulate a single web socket connection to a client.\r\n\r\nA remote is only recognized as being connected after it was accepted.\r\n\r\n#### Properties\r\n\r\n- __String - id__\r\n\r\n\r\n- __String - address__\r\n\r\n    Address of the underlying socket connection.\r\n\r\n\r\n- __Intege - port__\r\n\r\n    Port of the underlying socket connection.\r\n\r\n\r\n- __Integer - bytesSend__\r\n\r\n    Number of raw bytes (including protocol overhead) send over the socket.\r\n\r\n\r\n- __Integer - bytesReceived__\r\n\r\n    Number of raw bytes (including protocol overhead) send over the socket.\r\n\r\n\r\n- __Integer - version__\r\n\r\n    The version of the underlying WebSocket protocol for this remote.\r\n\r\n\r\n#### Methods\r\n\r\n- __Boolean - accept()__\r\n\r\n    Accepts a pending remote connection, which adds it to the list of connected \r\n    remotes on the server.\r\n\r\n    Once a remote is accepted messages can be send to it.\r\n    \r\n    Returns `true` in case the remote was accepted or `false` in case it could \r\n    not be accepted.\r\n\r\n\r\n- __Boolean - reject([String:reason])__\r\n\r\n    Rejects a pending remote and sends an optional `reason` as a message before \r\n    closing the connection. \r\n\r\n    Returns `true` in case the remote was rejected or `false` in case it could \r\n    not be rejected.\r\n\r\n\r\n- __Boolean - isPending()__\r\n    \r\n    Returns whether or not the connection is pending.\r\n\r\n    Pending means that the connection is yet to be either accepted or rejected.\r\n\r\n\r\n- __Object - info()__\r\n\r\n    Returns a object containing connection specific information:\r\n\r\n        {\r\n            ip: \"127.0.0.1\"\r\n            port: 35758,\r\n            bytesSend: 123,\r\n            bytesReceived: 456\r\n        }\r\n\r\n    > Note: The returned object is a reference.\r\n\r\n\r\n- __Boolean - send(any:message)__\r\n    \r\n    Sends a `message` to the remote.\r\n\r\n    Returns `true` in case the message was send or `false` in case it could \r\n    not be send.\r\n\r\n\r\n- __Boolean - close([Any:reason])__\r\n\r\n    Closes the connection to the remote. \r\n    \r\n    The optional `reason` is only supported in newer versions of the WebSocket \r\n    protocol and will be available as the `reason` property on the WebSocket's \r\n    close event.\r\n\r\n    Returns `true` in case the connection was closed or `false` in case it \r\n    was not.\r\n\r\n\r\n#### Events\r\n\r\n- __message(Any:message)__\r\n\r\n    Emitted when a `message` is received from a remote. \r\n    \r\n\r\n- __close(Boolean:closedByRemote)__\r\n\r\n    Emitted when the remote is disconnected from the server.\r\n\r\n    `closedByRemote` will be `true` in the case that the disconnect was initiated \r\n    by the remote.\r\n\r\n\r\n\r\n### Client\r\n\r\nA thin wrapper around the browser side `WebSocket` object, providing a \r\ninterface that is consistent with the lithium server.\r\n\r\n\r\n#### Methods\r\n\r\n- __Constructor - lithium.Client([Function:callback] [, Function:encoder, Function:decoder])__ *(Constructor)*\r\n\r\n    The optional `callback` argument is shortcut for the `connection` event.\r\n\r\n    If both the `encoder` and `decoder` arguments are present, messages will be \r\n    passed to these functions when being send / received.\r\n\r\n    For example, in order to process and treat all messages as JSON objects pass\r\n\r\n\r\n- __Boolean - connect(Integer:port [, String:hostname])__\r\n\r\n    Connects to the server at `port` and - optionally - `hostname`.\r\n\r\n    \r\n- __Boolean - isConnected()__\r\n\r\n    Returns `true` in case the client is currently connected to the server.\r\n\r\n\r\n- __Boolean - send(any:message)__\r\n\r\n    Sends a `message` to the remote.\r\n\r\n    Returns `true` in case the message was send or `false` in case it could \r\n    not be send.\r\n\r\n\r\n- __Boolean - close()__\r\n\r\n    Closes the connection to the server.\r\n\r\n    Returns `false` in case the connection is already closed.\r\n\r\n\r\n#### Events\r\n\r\n- __connection()__\r\n\r\n    Emitted once the connection to the server is established.\r\n\r\n\r\n- __message(Any:message)__\r\n\r\n    Emitted when a `message` is received from the server. \r\n\r\n\r\n- __close(Boolean:closedByServer)__\r\n\r\n    Emitted when the client is disconnected from the server.\r\n\r\n    In the case that the server has initiated the close of the connection, \r\n    the value of `closedByServer` will be `true`.\r\n\r\n\r\n## License\r\n\r\n__Lithium__ is licensed under MIT.\r\n\r\n"}